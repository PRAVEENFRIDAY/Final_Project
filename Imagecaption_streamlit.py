import streamlit as st

st.set_page_config(page_title="Image Caption Generator", page_icon="üñºÔ∏è", layout="wide")
from PIL import Image
import numpy as np
import pickle
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Dense, LSTM, Embedding, Dropout, add
#from tensorflow.keras.applications.inception_v3 import InceptionV3, preprocess_input
from tensorflow.keras.preprocessing import image as keras_image
from tensorflow.keras.applications.vgg16 import VGG16, preprocess_input

# --- Model builder (must match your training code!) ---
def build_caption_model(vocab_size, max_length):
    # Image feature layers
    inputs1 = Input(shape=(4096,))
    fe1 = Dropout(0.4)(inputs1)
    fe2 = Dense(256, activation='relu')(fe1)
    # Sequence feature layers
    inputs2 = Input(shape=(max_length,))
    se1 = Embedding(vocab_size, 256, mask_zero=True)(inputs2)
    se2 = Dropout(0.4)(se1)
    se3 = LSTM(256)(se2)
    # Decoder (combine)
    decoder1 = add([fe2, se3])
    decoder2 = Dense(256, activation='relu')(decoder1)
    outputs = Dense(vocab_size, activation='softmax')(decoder2)
    model = Model(inputs=[inputs1, inputs2], outputs=outputs)
    model.compile(loss='categorical_crossentropy', optimizer='adam')
    return model

# --- Load Tokenizer and Model ---
@st.cache_resource
def load_resources():
    try:
        with open('D:/GuviCoruseDoc/Data_Science/Final_Project/env/Scripts/image-caption-generator/working/tokenizer.pkl', 'rb') as f:
            tokenizer, max_length, vocab_size = pickle.load(f)
        model = build_caption_model(vocab_size, max_length)
        model.load_weights('D:/GuviCoruseDoc/Data_Science/Final_Project/env/Scripts/image-caption-generator/working/best_model.h5')
        return tokenizer, model, max_length
    except Exception as e:
        st.error(f"Error loading resources: {str(e)}")
        return None, None, None

# --- Feature Extractor ---
@st.cache_resource
def load_feature_extractor():
    base_model = VGG16(weights='imagenet')
    model = Model(inputs=base_model.input, outputs=base_model.get_layer('fc2').output)
    return model

feature_extractor = load_feature_extractor()

def extract_features(pil_img):
    img = pil_img.resize((224, 224))
    img_array = keras_image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = preprocess_input(img_array)
    features = feature_extractor.predict(img_array)
    return features  # shape: (1, 4096)

# --- Caption Generation ---
def generate_caption(model, tokenizer, image_features, max_length):
    start_token = tokenizer.word_index.get('startseq')
    end_token = tokenizer.word_index.get('endseq')
    in_text = [start_token]
    for _ in range(max_length):
        sequence = pad_sequences([in_text], maxlen=max_length, padding='post')
        yhat = model.predict([image_features, sequence], verbose=0)
        predicted_idx = np.argmax(yhat[0])
        if predicted_idx == end_token or predicted_idx == 0:
            break
        in_text.append(predicted_idx)
    caption_words = [
        tokenizer.index_word.get(i, '') 
        for i in in_text 
        if i != start_token and i != end_token and i != 0
    ]
    return ' '.join(caption_words).strip()

# --- Streamlit App ---
def main():
    st.title("üñºÔ∏è Image Caption Generator")
    st.markdown("Upload an image and get an automatic caption generated by AI")
    st.markdown("---")

    tokenizer, model, max_length = load_resources()
    if None in [tokenizer, model, max_length]:
        st.stop()

    col1, col2 = st.columns([2, 1])
    with col1:
        uploaded_file = st.file_uploader("Upload an image", type=["jpg", "jpeg", "png"])
        if uploaded_file is not None:
            image = Image.open(uploaded_file)
            st.image(image, use_column_width=True)
            if st.button("Generate Caption"):
                with st.spinner("Generating caption..."):
                    try:
                        features = extract_features(image)
                        caption = generate_caption(model, tokenizer, features, max_length)
                        with col2:
                            st.markdown("### Generated Caption")
                            st.markdown(f'<div style="background:#fff;border-radius:10px;padding:20px;box-shadow:0 4px 6px rgba(0,0,0,0.1);margin-top:20px;">{caption}</div>', unsafe_allow_html=True)
                    except Exception as e:
                        st.error(f"Error generating caption: {str(e)}")

    st.markdown("---")
    st.markdown("### How to use:")
    st.markdown("1. Upload an image (JPEG/PNG format)")
    st.markdown("2. Click 'Generate Caption'")
    st.markdown("3. View the generated caption")

if __name__ == "__main__":
    main()